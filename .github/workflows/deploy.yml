name: Deploy

on:
  push:
    branches:
      - main

jobs:
  Check:
    runs-on: ubuntu-18.04
    outputs:
      deploy: ${{ steps.check.outputs.check }}
    steps:
      - uses: actions/checkout@v2
      - uses: lukka/get-cmake@latest

      - name: Install Python3
        run: |
          sudo apt install -y python3

      - id: check
        name: Check Commit Message
        run: |
          git clone https://github.com/antony-jr/spirit
          cd spirit
          git tag > /tmp/tags.txt
          cd ..
          rm -rf spirit
          cat /tmp/tags.txt
          result=$(python3 scripts/check.py "$(git log -1 --pretty=%B)" "/tmp/tags.txt")
          echo "::set-output name=check::$result"
  BuildAndDeploy:
    name: "Build And Deploy"
    runs-on: ubuntu-18.04
    needs: Check
    steps:
      - uses: actions/checkout@v2
      - uses: lukka/get-cmake@latest

      - name: Install Qt and other Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get -y install build-essential libgl1-mesa-dev xvfb \
               automake libtool \
               libcairo-dev libfuse-dev desktop-file-utils \
               ca-certificates autoconf libtool patch wget \
               vim-common desktop-file-utils pkg-config \
               libarchive-dev librsvg2-dev librsvg2-bin liblzma-dev \
               libxdo-dev  

      - name: Static Build Qt 5.12.8
        run: |
          bash build_resources/build_qt_static.sh

      - name: Building Spirit
        id: appimage_build
        run: |
          export VERSION=$(git rev-parse --short HEAD)
          /usr/local/Qt-5.12.8/bin/qmake .
          make -j$(nproc)
          mkdir -p appdir/usr/lib 
          mkdir -p appdir/usr/bin ; 
          strip spirit ; cp spirit appdir/usr/bin/
          mkdir -p appdir/usr/share/applications ; 
          cp build_resources/spirit.desktop appdir/usr/share/applications/
          mkdir -p appdir/usr/share/icons/hicolor/256x256/apps/ ; 
          cp build_resources/spirit.png appdir/usr/share/icons/hicolor/256x256/apps/spirit.png
          
          deploy=${{ needs.Check.outputs.deploy }} 
          if [ "$deploy" = "false" ]
            then
            export tag="development"
            export VERSION=$(git rev-parse --short HEAD) 
          else
            export tag="latest"
            export VERSION=$deploy
          fi

          wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          chmod +x linuxdeploy-x86_64.AppImage

          ./linuxdeploy-x86_64.AppImage --appdir appdir --output appimage

          sed '0,/AI\x02/{s|AI\x02|\x00\x00\x00|}' -i spirit-$VERSION-x86_64.AppImage

          mv spirit-$VERSION-x86_64.AppImage spirit

          echo ::set-output name=appimagefile::spirit

          # Remove development appimages.
          rm -rf linuxdeploy*

          # Check if all files needed are generated.
          file spirit

      - name: Delete Old Development Builds
        if: needs.Check.outputs.deploy == 'false'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: development
          assets: spirit*
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Development Build
        if: needs.Check.outputs.deploy == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./spirit
          tag: development
          overwrite: true
          file_glob: true
          prerelease: true
          release_name: "Spirit Development Builds"
          body: "The latest and greatest of spirit!"

      - name: Create Release
        if: needs.Check.outputs.deploy != 'false'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.Check.outputs.deploy }}
          release_name: Release ${{ needs.Check.outputs.deploy }}
          body_path: ./release_notes/${{ needs.Check.outputs.deploy }}.md
          draft: false
          prerelease: false

      - name: Upload AppImage Release Asset
        if: needs.Check.outputs.deploy != 'false'
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{steps.appimage_build.outputs.appimagefile}}
          asset_name: ${{steps.appimage_build.outputs.appimagefile}}
          asset_content_type: application/octet-stream
