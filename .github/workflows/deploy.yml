name: Deploy

on:
  push:
    branches:
      - main
      - rewrite

jobs:
  Check:
    runs-on: ubuntu-18.04
    outputs:
      deploy: ${{ steps.check.outputs.check }}
    steps:
      - uses: actions/checkout@v2
      - uses: lukka/get-cmake@latest

      - name: Install Python3
        run: |
          sudo apt install -y python3

      - id: check
        name: Check Commit Message
        run: |
          git clone https://github.com/antony-jr/spirit
          cd spirit
          git tag > /tmp/tags.txt
          cd ..
          rm -rf spirit
          cat /tmp/tags.txt
          result=$(python3 scripts/check.py "$(git log -1 --pretty=%B)" "/tmp/tags.txt")
          echo "::set-output name=check::$result"


  BuildAndDeployLinux:
    name: "Build and Deploy (GNU+Linux AMD64)"
    runs-on: ubuntu-18.04
    needs: Check
    outputs:
      windowsfile: ${{ steps.appimage_build.outputs.windowsfile }}
      macosfile: ${{ steps.appimage_build.outputs.macosfile }} 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - uses: lukka/get-cmake@latest

      - name: Install Qt and other Dependencies
        run: |
          sudo add-apt-repository ppa:beineri/opt-qt-5.15.2-bionic -y
          sudo apt-get update -qq
          sudo apt-get -y install build-essential libgl1-mesa-dev xvfb qt515base \
               qt515multimedia qt515x11extras qt515tools qt515imageformats \
               qt515wayland automake libtool \
               libcairo-dev libfuse-dev zsync desktop-file-utils \
               ca-certificates autoconf libtool patchelf patch wget \
               vim-common desktop-file-utils pkg-config \
               librsvg2-dev librsvg2-bin liblzma-dev \
               libxrender-dev libxcb-icccm4-dev \
               libxcb-keysyms1-dev libxcb-res0-dev git \
               gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
               gstreamer1.0-plugins-bad gstreamer1.0-alsa \
               gstreamer1.0-pulseaudio

      - name: Install KWindowSystem
        run: |
          source /opt/qt*/bin/qt*-env.sh || true 
          git clone https://github.com/KDE/extra-cmake-modules
          cd extra-cmake-modules
          git checkout v5.98.0
          mkdir build 
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          cd ..
          cd ..
          rm -rf extra-cmake-modules
          
          git clone https://github.com/KDE/kwindowsystem
          cd kwindowsystem
          git checkout v5.98.0
          mkdir build
          cd build
          cmake ..
          make -j$(nproc)
          sudo make install
          cd ..
          cd ..
          rm -rf kwindowsystem

      - name: Install CivetWeb
        run: |
          wget "https://github.com/civetweb/civetweb/archive/refs/tags/v1.15.tar.gz"
          tar -xvf v1.15.tar.gz
          cd civetweb-1.15
          mkdir libbuild
          cd libbuild
          
          cmake -DCIVETWEB_ENABLE_CXX=ON \
          -DCIVETWEB_DISABLE_CGI=ON -DCIVETWEB_SERVE_NO_FILES=ON \
          -DCIVETWEB_ENABLE_SERVER_EXECUTABLE=OFF \
          -DCIVETWEB_INSTALL_EXECUTABLE=OFF -DCIVETWEB_BUILD_TESTING=OFF ..

          make -j$(nproc)
          sudo make install 
          cd ..
          cd ..
          rm -rf v1.15.tar.gz civetweb-1.15

      - name: Install LibArchive
        run: |
          git clone https://github.com/libarchive/libarchive
          cd libarchive
          git checkout "v3.5.1"
          cmake .
          make -j$(nproc)
          sudo make install -j$(nproc)
          cd ..
          rm -rf libarchive
          sudo cp -fp /usr/local/lib/pkgconfig/libarchive.pc /usr/lib/pkgconfig/libarchive.pc
          sudo cp -fp /usr/local/lib/libarchive.* /usr/lib/

      - name: Install QArchive
        run: |
          source /opt/qt*/bin/qt*-env.sh || true
          git clone https://github.com/antony-jr/QArchive
          cd QArchive
          git checkout 2d05e652ad9a2bff8c87962d5525e2b3c4d7351b 
          cmake .
          make -j$(nproc)
          sudo make install
          cd ..

      - name: Building Spirit
        id: appimage_build
        run: |
          source /opt/qt*/bin/qt*-env.sh || true
          
          export VERSION=$(git rev-parse --short HEAD)
          export COMMIT=$(git rev-parse --short HEAD)
          export BUILD="$GITHUB_RUN_NUMBER"

          deploy=${{ needs.Check.outputs.deploy }} 
          if [ "$deploy" = "false" ]
            then
            export tag="development"
            export SPIRIT_VERSION="v1"
            export VERSION=$(git rev-parse --short HEAD) 
          else
            export tag="latest"
            exprot SPIRIT_VERSION=$deploy
            export VERSION=$deploy
          fi

          mkdir build
          cd build
          cmake -DSPIRIT_VERSION="$SPIRIT_VERSION" -DSPIRIT_COMMIT="$COMMIT" -DSPIRIT_BUILD="$BUILD" .. 
          make -j$(nproc)
          mv spirit .. 
          cd ..
          rm -rf build 

          mkdir -p appdir/usr/lib 
          mkdir -p appdir/usr/bin

          strip spirit ; mv spirit appdir/usr/bin/
          mkdir -p appdir/usr/share/applications ; 
          cp build_resources/spirit.desktop appdir/usr/share/applications/
          mkdir -p appdir/usr/share/icons/hicolor/256x256/apps/ ; 
          cp build_resources/spirit.png appdir/usr/share/icons/hicolor/256x256/apps/spirit.png 

          wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt-continuous-x86_64.AppImage
          unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH
          
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -extra-plugins=imageformats,mediaservice -bundle-non-qt-libs

          # IMPORTANT: KWindowSystem does not work without this plugin. 
          sudo cp -rp /usr/local/lib/x86_64-linux-gnu/plugins/kf5 appdir/usr/plugins/
          export NORMAL=$USER 
          sudo chown $NORMAL -R appdir/usr/plugins/kf5

          pushd appdir/usr/plugins/kf5/kwindowsystem

          # patchelf --set-rpath "\$ORIGIN/../../../lib" KF5WindowSystemWaylandPlugin.so
          patchelf --set-rpath "\$ORIGIN/../../../lib" KF5WindowSystemX11Plugin.so 
          popd

          # Copy gstreamer
          install -Dm755 "/usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner" \
                         "appdir/usr/lib/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner"
          export gst_executables="-executable=appdir/usr/lib/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner"
          for plugin in adpcmdec alsa app audioconvert audioparsers audioresample \
                        autodetect coreelements gsm id3demux jack mpg123 mulaw playback \
                        pulseaudio typefindfunctions wavparse; do
                install -Dm755 "/usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgst${plugin}.so" \
                               "appdir/usr/lib/gstreamer-1.0/libgst${plugin}.so"
                gst_executables="${gst_executables} -executable=appdir/usr/lib/gstreamer-1.0/libgst${plugin}.so"
          done
          
          ./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -extra-plugins=imageformats,mediaservice -bundle-non-qt-libs ${gst_executables}

          wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
          chmod +x appimagetool-x86_64.AppImage
          ./appimagetool-x86_64.AppImage -u "gh-releases-zsync|antony-jr|spirit|$tag|spirit*-x86_64.AppImage.zsync" appdir

          # sed '0,/AI\x02/{s|AI\x02|\x00\x00\x00|}' -i spirit-$VERSION-x86_64.AppImage

          echo ::set-output name=appimagefile::spirit-$VERSION-x86_64.AppImage
          echo ::set-output name=windowsfile::spirit-$VERSION-setup.exe
          echo ::set-output name=macosfile::spirit-$VERSION-x86_64.dmg

          # Remove development appimages.
          rm -rf linuxdeploy* appimagetool*

      - name: Delete Old Development Builds
        if: needs.Check.outputs.deploy == 'false'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: development
          assets: "*.AppImage*"
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Development Build
        if: needs.Check.outputs.deploy == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{steps.appimage_build.outputs.appimagefile}}*
          tag: development
          overwrite: true
          file_glob: true
          prerelease: true
          release_name: "Spirit Development Builds"
          body: "The latest and greatest of spirit!"

      - name: Create Release
        if: needs.Check.outputs.deploy != 'false'
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.Check.outputs.deploy }}
          release_name: Release ${{ needs.Check.outputs.deploy }}
          body_path: ./release_notes/${{ needs.Check.outputs.deploy }}.md
          draft: false
          prerelease: false

      - name: Upload AppImage Release Asset
        if: needs.Check.outputs.deploy != 'false'
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{steps.appimage_build.outputs.appimagefile}}
          asset_name: ${{steps.appimage_build.outputs.appimagefile}}
          asset_content_type: application/octet-stream 
 
  BuildAndDeployMac:
    name: "Build and Deploy (macOS x86_64)"
    runs-on: macos-10.15
    needs: [Check, BuildAndDeployLinux]
    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest

      - name: Install Qt, LibArchive, PkgConfig and Ninja
        run: brew install qt@5 libarchive pkg-config ninja

      - name: Install QArchive
        run: |
          git clone https://github.com/antony-jr/QArchive
          cd QArchive
          git checkout v2.1.1-mac-fix
          mkdir build
          cd build
          export Qt5_DIR=$(brew --prefix qt@5)
          cmake -DLIBARCHIVE_PKG_CONFIG=$(brew --prefix libarchive)/lib/pkgconfig/libarchive.pc ..
          cmake --build . --config release
          sudo make install
          cd ..
          cd ..
          rm -rf QArchive

      - name: Install CivetWeb
        run: |
          wget "https://github.com/civetweb/civetweb/archive/refs/tags/v1.15.tar.gz"
          tar -xvf v1.15.tar.gz
          cd civetweb-1.15
          mkdir libbuild
          cd libbuild
          
          cmake -DCIVETWEB_ENABLE_CXX=ON \
          -DCIVETWEB_DISABLE_CGI=ON -DCIVETWEB_SERVE_NO_FILES=ON \
          -DCIVETWEB_ENABLE_SERVER_EXECUTABLE=OFF \
          -DCIVETWEB_INSTALL_EXECUTABLE=OFF -DCIVETWEB_BUILD_TESTING=OFF ..

          make
          sudo make install 
          cd ..
          cd ..
          rm -rf v1.15.tar.gz civetweb-1.15

      - name: Make Icon
        run: |
          git clone https://github.com/bitboss-ca/png2icns
          cd png2icns
          cp ../artwork/logo-1024x1024.png .
          ./png2icns.sh logo-1024x1024.png
          mv logo-1024x1024.icns ../build_resources/spirit.icns
          cd ..
          rm -rf png2icns

      - name: Build Spirit
        id: macos_build
        run: |
          mkdir build
          cd build
          export Qt5_DIR=$(brew --prefix qt@5)
          cmake -G Ninja ..
          cmake --build . --config release
          mkdir spirit.app/Contents/Resources
          cp ../build_resources/Info.plist spirit.app/Contents/
          cp ../build_resources/spirit.icns spirit.app/Contents/Resources/
          $(brew --prefix qt@5)/bin/macdeployqt spirit.app -no-strip -dmg 
          mv spirit.dmg ../spirit.dmg
          cd ..
          rm -rf build

      - name: Delete Old Development Builds
        if: needs.Check.outputs.deploy == 'false'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: development
          assets: "*.dmg" 
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Development Build
        if: needs.Check.outputs.deploy == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./spirit.dmg
          asset_name: ${{ needs.BuildAndDeployLinux.outputs.macosfile }}
          tag: development
          overwrite: true
          prerelease: true
          release_name: "Spirit Development Builds"
          body: "The latest and greatest of spirit!"

      - name: Upload MacOS Release Asset
        if: needs.Check.outputs.deploy != 'false'
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.BuildAndDeployLinux.outputs.upload_url }}
          asset_path: ./spirit.dmg
          asset_name: ${{ needs.BuildAndDeployLinux.outputs.macosfile }}
          asset_content_type: application/octet-stream


  BuildAndDeployWindows:
    name: "Build and Deploy (Windows x86)"
    runs-on: windows-latest
    needs: [Check, BuildAndDeployLinux]
    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      
      - name: Install MSVC
        uses: ilammy/msvc-dev-cmd@v1
      
      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install Wget
        run: choco install wget

      - name: Install Qt Installer Framework
        id: qifw
        run: |
          mkdir qifw
          wget -O Installer.exe "https://drive.google.com/uc?export=download&id=1Kg_0WVuTFUUKZ6PsMjHYqGVEQv9itxm4&confirm=t"
          .\Installer.exe in -t "$pwd\qifw" --am -c --al
          rm Installer.exe

      - name: Build Spirit
        id: windows_build
        run: |
          mkdir build
          cd build
          cmake ..
          cmake --build . --config release
          copy ..\qtinstaller\packages\com.antonyjr.spirit\data\logo.ico .\Release\logo.ico
          rm -r -fo ..\qtinstaller\packages\com.antonyjr.spirit\data
          mv .\Release ..\qtinstaller\packages\com.antonyjr.spirit\data
          cd ..
          rm -r -fo .\build
          ls .\qtinstaller\packages\com.antonyjr.spirit\data
          .\qifw\bin\binarycreator.exe -c .\qtinstaller\config\config.xml -p .\qtinstaller\packages Setup.exe

      - name: Delete Old Development Builds
        if: needs.Check.outputs.deploy == 'false'
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: development
          assets: "*setup.exe" 
          fail-if-no-assets: false
          fail-if-no-release: false

      - name: Upload Development Build
        if: needs.Check.outputs.deploy == 'false'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./Setup.exe
          asset_name: ${{ needs.BuildAndDeployLinux.outputs.windowsfile }}
          tag: development
          overwrite: true
          prerelease: true
          release_name: "Spirit Development Builds"
          body: "The latest and greatest of spirit!"

      - name: Upload Windows Release Asset
        if: needs.Check.outputs.deploy != 'false'
        uses: actions/upload-release-asset@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.BuildAndDeployLinux.outputs.upload_url }}
          asset_path: ./Setup.exe
          asset_name: ${{ needs.BuildAndDeployLinux.outputs.windowsfile }} 
          asset_content_type: application/octet-stream
